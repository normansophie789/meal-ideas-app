{"version":3,"sources":["components/Title.js","components/Form.js","components/Meals.js","components/MealTile.js","api-call-constant.js","App.js","serviceWorker.js","index.js"],"names":["Title","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","id","React","Component","Form","onSubmit","props","handleSubmit","htmlFor","type","name","Meals","ingredient","meals","MealTile","title","Underscore","unescape","class","href","link","src","image_src","alt","Api_Key","App","_this","call","getMeals","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","ingredient_param","api_call","response","list","i","wrap","_context","prev","next","preventDefault","target","elements","setState","fetch","sent","json","recipes","push","MealTile_MealTile","image_url","source_url","console","log","stop","_x","state","undefined","Title_Title","Form_Form","Meals_Meals","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c607e2c4.chunk.js","sourcesContent":["/*\r\nA component to render the title of the app.\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nexport class Title extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id=\"title-block\">\r\n                <h1>Meal Ideas App</h1>\r\n                <p>Search for an ingredient and get a list of meals you can cook!</p>\r\n            </div>\r\n        );\r\n    }\r\n}","/*\r\nA component to render a form so that the user can search for an ingredient\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nexport class Form extends React.Component {\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.handleSubmit}>\r\n                <label htmlFor=\"ingredient\">Enter Ingredient: </label>\r\n                <input type=\"text\" name=\"ingredient\"></input>\r\n                <button>Search</button>\r\n            </form>\r\n        );\r\n    }\r\n}","/*\r\nA component to render a list of meals from the ingredient searched.\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nexport class Meals extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.ingredient && <h2>Meals containing {this.props.ingredient}</h2>}\r\n                {this.props.meals}\r\n            </div>\r\n        );\r\n    }\r\n}","/*\r\nA component to render each meal as a tile in the Meals component.\r\n*/\r\n\r\nimport React from 'react';\r\nimport Underscore from 'underscore';\r\n\r\nexport class MealTile extends React.Component {\r\n    render() {\r\n        var title = this.props.title;\r\n        title = Underscore.unescape(title)\r\n        return (\r\n            <div class=\"meal_tile\">\r\n                <a href={this.props.link}>\r\n                    <img src={this.props.image_src} alt={this.props.title} />\r\n                </a>\r\n                <p>{title}</p>\r\n            </div>\r\n        );\r\n    }\r\n}","export const Api_Key = '2fe65e813c472056163c5a534ee9e0e2';","/* API used in this project : Food2Fork */\r\n\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport {Title} from './components/Title';\r\nimport {Form} from './components/Form';\r\nimport {Meals} from './components/Meals';\r\nimport {MealTile} from './components/MealTile';\r\nimport {Api_Key} from './api-call-constant';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {meals: [], ingredient: undefined};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div class=\"header\">\r\n          <Title />\r\n          <Form handleSubmit={this.getMeals} />\r\n        </div>\r\n        <Meals meals={this.state.meals} ingredient={this.state.ingredient}/>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getMeals = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const ingredient_param = e.target.elements.ingredient.value;\r\n    this.setState({ingredient: ingredient_param});\r\n\r\n    const api_call = await fetch(\"https://www.food2fork.com/api/search?key=\" + Api_Key+ \"&q=\" + ingredient_param + \"&page=2\");\r\n    const response = await api_call.json();\r\n\r\n    var list = [];\r\n    for (var i in response.recipes) {\r\n      list.push(<MealTile title={response.recipes[i].title} image_src={response.recipes[i].image_url} link={response.recipes[i].source_url} />);\r\n    }\r\n\r\n    this.setState({meals: list});\r\n\r\n    console.log(response);\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}